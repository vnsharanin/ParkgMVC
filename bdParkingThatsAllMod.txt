drop database Parkg;
CREATE DATABASE Parkg;
use Parkg;

CREATE TABLE USR
(
	Login char(255) not null default '',
	Balance double null default 0.00,
	Num_visits int(11) null default 0,
	PRIMARY KEY(Login)
);

#Главное не забыть пенести эту сущность, сделать ее после сущности "расположение на парковке", иначе errno 150
#Status may be: 1)Expired 2)Visited 3)In waiting visit 4)Revoke
CREATE TABLE Reservation
(
	id_type int(11) unsigned not null auto_increment,
	Login char(255) not null default '',
	DateReservation char(255) not null default '00-00-00 00:00:00',
	id_location int(11) null default 0,
	StatusReservation char(255) not null default '',
	FOREIGN KEY(Login) REFERENCES USR(Login),
	PRIMARY KEY(Login)
);

#Add type auto and then will check his. For trucks create new zone and new tarif.
CREATE TABLE TS
(
	Number char(255) not null default '',
	Company char(255) not null default '',
	Mode char(255) not null default '',
	Login char(255) not null default '',
	FOREIGN KEY(Login) REFERENCES USR(Login),
	PRIMARY KEY(Number)
);


CREATE TABLE Type_Parking
(
	id_type int(11) unsigned not null auto_increment,
	Name char(30) not null default '',
	PRIMARY KEY(id_type)
);

INSERT INTO Type_Parking (Name)
values ('Ground'),
('Underground'),
('Ground-Underground');

CREATE TABLE ParkingZones
(
	Parking_zone int(11) not null default 1,
	id_type int(11) unsigned not null default 1,
	#Levels int(11) not null default 1,
	Address char(50) not null default '',
	FOREIGN KEY(id_type) REFERENCES Type_Parking(id_type),
	PRIMARY KEY(Parking_zone)
);

INSERT INTO ParkingZones (Parking_zone, id_type,Address)
values (1, 1,'Vladimir/Bolokonskaya'),
(2, 2, 'Vladimir/Bolokonskaya'),
(3, 1,'Vladimir/Bolokonskaya');


#Type Level may be: 1)Underground part 2)Elevated part
CREATE TABLE LevelsZone
(
	id_location_level int(11) unsigned not null auto_increment,
	Parking_zone int(11) not null default 1,
	Level int(11) not null default 1,
	TypeLevel char(255) not null default '',
	#Places int(11) not null default 1,
	FOREIGN KEY(Parking_zone) REFERENCES ParkingZones(Parking_zone),
	PRIMARY KEY(id_info_about_level)
);

#Location = position
CREATE TABLE Places
(
	id_location_place int(11) unsigned not null auto_increment,
	id_location_level int(11) unsigned not null default 1,
	Place int(11) not null default 1,
	Status char(255) not null default 'Free',
	#then will be bool:
	SupportClimateControl char(3) not null default '',
	ProtectionFromTheWeather char(3) not null default '',
	FOREIGN KEY(id_location_level) REFERENCES LevelsZone(id_location_level),
	PRIMARY KEY(id_location_place)
);

#FirstAttemptGoOut?
CREATE TABLE Visit
(
	Num_vis int(11) unsigned not null auto_increment,
	Number char(255) not null default '',	
	id_location_place int(11) unsigned not null default 1,
	DateIn char(255) not null default '00-00-00 00:00:00',
	DateOut char(255) null default 'dateout',
	FirstAttemptGoOut char(255) null default 'dateout1',
	PenultimateAttemptGoOut char(255) null default 'dateout2',
	LastAttemptGoOut char(255) null default 'dateout3',
	PRIMARY KEY(Num_vis),
	FOREIGN KEY(Number) REFERENCES TS(Number),
	FOREIGN KEY(id_location_place) REFERENCES Places(id_location_place)
);





delimiter //
create function func1(zon integer(11), lev integer(11)) returns integer
begin
set zon := (select id_record_with_z_and_l from LevelsZone where Parking_zone = zon and Level = lev);
return zon;
end//
delimiter ;

delimiter //
create function func25(Plac integer(11), id_z integer(11)) returns integer
begin
IF ((select count(*) from Places where id_record_with_z_and_l = id_z and Place = Plac ) > 0) THEN
return (select id_Place_p_Level_l_Zone_z from Places where id_record_with_z_and_l = id_z and Place = Plac);
ELSEIF ((select count(*) from Places where id_record_with_z_and_l = id_z and Place = Plac) = 0) THEN
return 0;
END IF;
end//
delimiter ;


delimiter //
create function func2(idplz integer(11)) returns integer
begin
IF ((select count(*) from Situated where id_Place_p_Level_l_Zone_z = idplz) > 0) THEN
return (select id_situated from Situated where id_Place_p_Level_l_Zone_z = idplz);
ELSEIF ((select count(*) from Situated where id_Place_p_Level_l_Zone_z = idplz) = 0) THEN
return 0;
END IF;
end//
delimiter ;




delimiter //
create function func3() returns integer
begin
declare Rec integer default 0;
SELECT COUNT(*) INTO Rec FROM ParkingZones;
return Rec;
end//
delimiter ;

delimiter //
create function func4(k integer(11)) returns integer
begin
return (SELECT Levels FROM ParkingZones where Parking_zone = k);
end//
delimiter ;

delimiter //
create function func5(k integer(11), j integer(11)) returns integer
begin
return (SELECT All_places_on_this_level FROM LevelsZone where Parking_zone = k and Level = j);
end//
delimiter ;

delimiter //
create function func6(Numb Char(11)) returns integer
begin
if EXISTS(SELECT * FROM TS where Number = Numb) THEN
return 1;
ELSEIF NOT EXISTS(SELECT * FROM TS where Number = Numb) THEN return 0;
END IF;
end//
delimiter ;

delimiter //
create function func9(clzon integer(11), cllev integer(11), clplace integer(11) ) returns integer
begin

IF EXISTS(select * from Location_On_Parking where Zone = clzon and Level = cllev and Place = clplace and Status == 'Free') THEN
return 1;
ELSEIF NOT EXISTS(select * from Location_On_Parking where Zone = clzon and Level = cllev and Place = clplace and Status == 'Free') THEN
return 0;
END IF;

end//
delimiter ;

insert into USR (Login, Balance, Num_visits) values ('v_sh95',0.00,0);

INSERT INTO LevelsZone (Parking_zone,Level,All_places_on_this_level)
values (1, 1,0),
(1, 2,0),
(2, 1,0),
(3, 1,0);


INSERT INTO LevelsZone (Parking_zone,Level,All_places_on_this_level)
values (1, 1,16),
(1, 2,20),
(2, 1,14),
(3, 1,10);

INSERT INTO Situated (id_Place_p_Level_l_Zone_z)
values (1);

INSERT INTO visit (Number,id_situated,DateIn)
values ('T188HM33', 1,'10.09.14');
